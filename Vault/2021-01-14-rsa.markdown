---
layout: post
type: post
title: "RSA"
header-img: "img/security.jpg"
# All dates must be YYYY-MM-DD format!
date: 2021-01-14
catalog: true
mathjax: true
author: "Adrià"
tags:
  - RSA encryption
  - Arithmetics
  - Prime numbers
  - Euler's Theorem
---

The other day, I started researching RSA because I wanted to know how it works. This post is a brief summary of the algorithm. 

RSA is the most famous asymmetric cryptosystem. It was developed by Ronald **R**ivest, Adi **S**hamir and Leonard **A**dleman in 1978 and has formed the basis of several encryption programs, including Pretty Good Privacy (PGP). Current versions of RSA employ a 128-bit encryption algorithm, which is computationally infeasible to crack without the key.

The security of this system is based on the complexity of factoring huge integers. This problem is NP-complex, so there is no fast way to do it, and therefore it is not feasible for a hacker to decrypt the message.

## Euler's theorem

First of all, we need to know what **Euler's theorem** is because it is the basis of the RSA encryption algorithm.

Euler's theorem states that:

<div align="center">
  $m^{\phi(n)}\equiv 1\ mod(n)$
</div>

where $\phi$ is the Euler totient function that counts the number of positive integers up to *n* that are primes of $n$ (share primes). So if we are calculating $\phi(9)$ we would get $6$: $1,2,4,5,7$ and $8$.


This theorem is commonly used to reduce huge numbers modulo n. Take for example:
<div align="center">
 $7^{222} mod(10)$
 </div>


$7$ and $10$ are coprime and $\phi(10)=4$ because only $3,6,7,9$ do not have any prime shared with $10$. Applying the theorem we know that:

<br>
<div align="center">
$7^4 \equiv 1\ mod(10)$
</div>

Then we can express $222$ as $4\times55+2$:<br>
<div align="center">
$7^{4 \times 55 +2}\ mod(10) \equiv (7^{4})^{55} \times 7^2\ mod(10) $
</div>

which is equivalent to:
<div align="center">
$1^{55} \times 7^2\ mod(10) \equiv 49\ mod(10) \equiv  9\ mod(10)$
</div>


## The algorithm

Let $p$ and $q$ be two large prime numbers and *n* their product. We also define *e* as a number that has no common factor with $phi(n)$. For example, if we define *p=2*, *q=7* and *n=14*. We must choose a public key $e$ that has no common prime divisor with $\phi(n)$ which can be calculated as $(p-1) \times (q-1)$.


In this case we get $\phi(n)=6$ so we can set $e=5$. This will be our public key. Therefore, if we want to send an encrypted $2$ as a message, we would first do the following:

<div align="center">
 $2^{5}\ mod(14) = 4$ 
</div>

$4$ is the encrypted message. Now we need to know how to calculate the private key. The private key will be used in the decryption part. The private key *d* is chosen so that

<div align="center">
 $e\cdot d \equiv 1\ mod(\phi(n))$
</div>


A fast brute force search algorithm would work to find it. Notice that we can do it easily because we know $\phi(n)$, if we didn't we would be in trouble because we would have to factor *n* (see the formula below for why).

<div align="center">
$\phi(n)=\phi(p)\cdot\phi(q)=(p-1)\cdot(q-1)$
</div>


Now we can send the message to the person who will decrypt it using the private key: 
<div align="center">
 $4^{11} mod(14) = 2$ 
 </div>


Note that this example is very easy (to make it easier to understand) but in real life we would be working with extremely huge prime numbers (about 1024 bits).

## Wrapping up

Let's assume the message *M*, and its encrypted value *C*. We also know by definition that  $e\cdot d=1+k(p-1)(q-1)$ for any given k:

<div align="center">
$C^d\ mod(n) = (M^e)^d\ mod(n) = M^{1+k(p-1)(q-1)}\ mod(n) = (M^{(p-1)(q-1)})^k \cdot M\ mod(n)$
 </div>

If we recall Euler's theorem, $m^{\phi(n)} \equiv 1 mod(n)$, and the fact that in general $gcd(M,p)=gcd(M,q)=gcd(M,n)=1$, we obtain that $(M^{(p-1)(q-1)})^k \equiv 1 mod(n)$.

Therefore, we finally obtain $C^d mod(n) = 1 \cdot M mod(n)$. □